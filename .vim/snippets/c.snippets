# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
# main(void)
snippet vmain
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>
	${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"
	${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	#define $1

	${2}

	#endif
#ifndef $1
#	#define ${1:SYMBOL}
#	#endif
#	${2}

snippet def
	#define $1
snippet ifdef
	#ifdef ${1:FOO}
	#define ${2}
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)

snippet once
	#pragma once
	$1
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}${3}
snippet el
	else {
		${1}
	}${2}
snippet else
	else {
		${1}
	}${2}
# Tertiary conditional
snippet thr
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});${3}
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}${3}
# While Loop2
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}${3}
# For Loop
snippet for
	for (${1:/* condition */}) {
		${2:/* code */}
	}${3}
# Custom For Loop
snippet fori
	for (${1:i} = 0; $1 < ${2:n}; $1${3:++}) {
		${4:/* code */}
	}${5}
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}${6}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}${5}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${1:SYMBOL} {
		${3:/* data */}
	} $1_t, ${2:*p_$1_t};${4}
# Typdef enum
snippet en
	enum ${1:/* name */} {
		${2:/* data */}
	};${3}
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};${3}
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pf
	printf("${1:%s}\n"${2});${3}
snippet pfd
	printf("%s() in %s, Line: %d\n", __func__, __FILE__, __LINE__);${2}
# printk
snippet pk
	printk(${1});${2}
snippet pkd
	printk("%s() in %s, Line: %d\n", __func__, __FILE__, __LINE__);${2}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# scanf
snippet sc
	scanf("${1:%s}\n"${2});${3}
snippet .
	[${1}]${2}
snippet un
	unsigned
snippet re
	return ${1:0};${2}
#switch
snippet sw
	switch (${1}) {
	case ${2:CASE}:
		${3:break;}

	default:
		${4:break;}
	}${5}
snippet switch
	switch (${1}) {
	case ${2:CASE}:
		${3:break;}

	default:
		${4:break;}
	}${5}
snippet cfun
	//description:
	//param:
	//return:
